// Code generated by MockGen. DO NOT EDIT.
// Source: middleware/sources/cache.go

// Package mocks is a generated GoMock package.
package mocks

import (
	middleware "github.com/coldze/test/middleware"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockCacheSource is a mock of CacheSource interface
type MockCacheSource struct {
	ctrl     *gomock.Controller
	recorder *MockCacheSourceMockRecorder
}

// MockCacheSourceMockRecorder is the mock recorder for MockCacheSource
type MockCacheSourceMockRecorder struct {
	mock *MockCacheSource
}

// NewMockCacheSource creates a new mock instance
func NewMockCacheSource(ctrl *gomock.Controller) *MockCacheSource {
	mock := &MockCacheSource{ctrl: ctrl}
	mock.recorder = &MockCacheSourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCacheSource) EXPECT() *MockCacheSourceMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockCacheSource) Get(key string) (middleware.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].(middleware.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockCacheSourceMockRecorder) Get(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCacheSource)(nil).Get), key)
}

// Insert mocks base method
func (m *MockCacheSource) Insert(response middleware.Response) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", response)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert
func (mr *MockCacheSourceMockRecorder) Insert(response interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockCacheSource)(nil).Insert), response)
}

// Remove mocks base method
func (m *MockCacheSource) Remove(response middleware.Response) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", response)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove
func (mr *MockCacheSourceMockRecorder) Remove(response interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockCacheSource)(nil).Remove), response)
}
